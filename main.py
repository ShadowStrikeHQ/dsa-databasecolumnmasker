import argparse
import sqlite3
import hashlib
import logging
import random
import pandas as pd
from faker import Faker

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def setup_argparse():
    """
    Sets up the argument parser for the command-line interface.
    """
    parser = argparse.ArgumentParser(description="Masks sensitive data in SQLite database columns.")
    parser.add_argument("database_file", help="Path to the SQLite database file.")
    parser.add_argument("table_name", help="Name of the table to mask.")
    parser.add_argument("columns", nargs="+", help="List of column names to mask.")
    parser.add_argument(
        "--masking_function",
        choices=["redact", "hash", "partial", "faker_name", "faker_email", "faker_address"],
        default="redact",
        help="Masking function to apply (redact, hash, partial, faker_name, faker_email, faker_address). Default is redact.",
    )
    parser.add_argument(
        "--partial_mask_percentage",
        type=int,
        default=50,
        help="Percentage of characters to mask in partial masking. Only applicable when using 'partial' as masking function. Default is 50.",
    )
    return parser.parse_args()


def redact(value):
    """
    Redacts the input value by replacing it with '[REDACTED]'.
    """
    return "[REDACTED]"


def hash_value(value):
    """
    Hashes the input value using SHA-256.
    """
    if value is None:
        return None
    return hashlib.sha256(str(value).encode("utf-8")).hexdigest()


def partial_mask(value, percentage=50):
    """
    Partially masks the input value by replacing a percentage of characters with '*'.
    """
    if value is None:
        return None

    value = str(value)  # Ensure it's a string
    length = len(value)
    mask_length = int(length * (percentage / 100))
    start_index = random.randint(0, length - mask_length)
    masked_value = (
        value[:start_index] + "*" * mask_length + value[start_index + mask_length :]
    )
    return masked_value

def faker_name(value):
    """
    Replaces the input value with a fake name generated by Faker.
    """
    fake = Faker()
    return fake.name()

def faker_email(value):
    """
    Replaces the input value with a fake email generated by Faker.
    """
    fake = Faker()
    return fake.email()

def faker_address(value):
    """
    Replaces the input value with a fake address generated by Faker.
    """
    fake = Faker()
    return fake.address()

def mask_data(db_file, table_name, columns, masking_function, partial_mask_percentage=50):
    """
    Connects to the SQLite database and applies the specified masking function to the given columns.
    """
    try:
        conn = sqlite3.connect(db_file)
        cursor = conn.cursor()

        # Input validation: Check if table exists
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (table_name,))
        if not cursor.fetchone():
            raise ValueError(f"Table '{table_name}' does not exist in the database.")

        # Input validation: Check if columns exist
        for column in columns:
            try:
                cursor.execute(f"SELECT {column} FROM {table_name} LIMIT 1")  # Attempt to select column
            except sqlite3.Error as e:
                raise ValueError(f"Column '{column}' does not exist in table '{table_name}'. Error: {e}") from e

        # Prepare the update query based on the masking function
        if masking_function == "redact":
            mask_func = redact
        elif masking_function == "hash":
            mask_func = hash_value
        elif masking_function == "partial":
            mask_func = partial_mask
        elif masking_function == "faker_name":
            mask_func = faker_name
        elif masking_function == "faker_email":
            mask_func = faker_email
        elif masking_function == "faker_address":
            mask_func = faker_address
        else:
            raise ValueError(f"Invalid masking function: {masking_function}")

        for column in columns:
            # Fetch all values from the column
            cursor.execute(f"SELECT rowid, {column} FROM {table_name}")
            rows = cursor.fetchall()

            for rowid, value in rows:
                masked_value = mask_func(value, percentage=partial_mask_percentage)
                cursor.execute(
                    f"UPDATE {table_name} SET {column} = ? WHERE rowid = ?",
                    (masked_value, rowid),
                )
            logging.info(f"Column '{column}' in table '{table_name}' masked using '{masking_function}'.")

        conn.commit()
        logging.info(f"Data masking completed successfully for table '{table_name}' in '{db_file}'.")

    except sqlite3.Error as e:
        logging.error(f"Database error: {e}")
    except ValueError as e:
        logging.error(f"Input error: {e}")
    except Exception as e:
        logging.error(f"An unexpected error occurred: {e}")
    finally:
        if conn:
            conn.close()


def main():
    """
    Main function to parse arguments and execute the data masking process.
    """
    args = setup_argparse()

    try:
        # Validate partial_mask_percentage
        if args.masking_function == "partial" and (args.partial_mask_percentage < 0 or args.partial_mask_percentage > 100):
            raise ValueError("partial_mask_percentage must be between 0 and 100.")

        mask_data(
            args.database_file,
            args.table_name,
            args.columns,
            args.masking_function,
            args.partial_mask_percentage,
        )

    except ValueError as e:
        logging.error(e)
    except Exception as e:
        logging.error(f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    # Usage examples:
    # 1. Redact the 'email' column in the 'users' table of 'mydatabase.db':
    #    python main.py mydatabase.db users email
    #
    # 2. Hash the 'password' and 'ssn' columns in the 'employees' table:
    #    python main.py mydatabase.db employees password ssn --masking_function hash
    #
    # 3. Partially mask the 'credit_card' column with 75% masking:
    #    python main.py mydatabase.db customers credit_card --masking_function partial --partial_mask_percentage 75
    #
    # 4. Replace name values with faker generated names in column 'name'
    #    python main.py mydatabase.db person name --masking_function faker_name
    #
    # 5. Replace email values with faker generated emails in column 'email'
    #    python main.py mydatabase.db person email --masking_function faker_email
    #
    # 6. Replace address values with faker generated address in column 'address'
    #    python main.py mydatabase.db person address --masking_function faker_address

    main()